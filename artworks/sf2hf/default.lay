<mamelayout version="2">

  <element name="inst_left" defstate="0">
    <image file="Instruction Cards - Balrog 01 - leftCenter.png" state="0"/>
    <image file="Instruction Cards - Blanka 01 - leftCenter.png" state="1"/>
    <image file="Instruction Cards - Chun Li 01 - leftCenter.png" state="2"/>
    <image file="Instruction Cards - Chun Li 02 - leftCenter.png" state="3"/>
    <image file="Instruction Cards - Dhalsim 01 - leftCenter.png" state="4"/>
    <image file="Instruction Cards - Dhalsim 02 - leftCenter.png" state="5"/>
    <image file="Instruction Cards - E Honda 01 - leftCenter.png" state="6"/>
    <image file="Instruction Cards - Guile 01 - leftCenter.png" state="7"/>
    <image file="Instruction Cards - Guile 02 - leftCenter.png" state="8"/>
    <image file="Instruction Cards - Ken 01 - leftCenter.png" state="9"/>
    <image file="Instruction Cards - M Bison 01 - leftCenter.png" state="10"/>
    <image file="Instruction Cards - Ryu 01 - leftCenter.png" state="11"/>
    <image file="Instruction Cards - Sagat 01 - leftCenter.png" state="12"/>
    <image file="Instruction Cards - Vega 01 - leftCenter.png" state="13"/>
    <image file="Instruction Cards - Zangief 01 - leftCenter.png" state="14"/>
    <image file="Instruction Cards - Zangief 02 - leftCenter.png" state="15"/>
    <image file="Instruction Cards - Zangief 03 - leftCenter.png" state="16"/>
  </element>

  <element name="inst_right" defstate="0">
    <image file="Instruction Cards - Balrog 01 - rightCenter.png" state="0"/>
    <image file="Instruction Cards - Blanka 01 - rightCenter.png" state="1"/>
    <image file="Instruction Cards - Chun Li 01 - rightCenter.png" state="2"/>
    <image file="Instruction Cards - Chun Li 02 - rightCenter.png" state="3"/>
    <image file="Instruction Cards - Dhalsim 01 - rightCenter.png" state="4"/>
    <image file="Instruction Cards - Dhalsim 02 - rightCenter.png" state="5"/>
    <image file="Instruction Cards - E Honda 01 - rightCenter.png" state="6"/>
    <image file="Instruction Cards - Guile 01 - rightCenter.png" state="7"/>
    <image file="Instruction Cards - Guile 02 - rightCenter.png" state="8"/>
    <image file="Instruction Cards - Ken 01 - rightCenter.png" state="9"/>
    <image file="Instruction Cards - M Bison 01 - rightCenter.png" state="10"/>
    <image file="Instruction Cards - Ryu 01 - rightCenter.png" state="11"/>
    <image file="Instruction Cards - Sagat 01 - rightCenter.png" state="12"/>
    <image file="Instruction Cards - Vega 01 - rightCenter.png" state="13"/>
    <image file="Instruction Cards - Zangief 01 - rightCenter.png" state="14"/>
    <image file="Instruction Cards - Zangief 02 - rightCenter.png" state="15"/>
    <image file="Instruction Cards - Zangief 03 - rightCenter.png" state="16"/>
  </element>

  <view name="InstructionsCardsView">
    <screen index="0">
      <bounds x="510" y="347" width="2990" height="2330"/>
    </screen>
    <element id="inst_left" ref="inst_left">
      <bounds x="0" y="347" width="510" height="2330"/>
    </element>
    <element id="inst_right" ref="inst_right">
      <bounds x="3500" y="347" width="510" height="2330"/>
    </element>
  </view>

<script><![CDATA[
  local stateLeft = 0
  local stateRight = 0
  local numStates = 17

-- Variables pour les entrées du joueur 1 (gauche)
local player1_start_IOPORT = "IN0"
local player1_start_BITPORT = 0x10
local player1_keyup_IOPORT = "IN1"
local player1_keyup_BITPORT = 0x0008
local player1_keydown_IOPORT = "IN1"
local player1_keydown_BITPORT= 0x0004

-- Variables pour les entrées du joueur 2 (droite)
local player2_start_IOPORT = "IN0"
local player2_start_BITPORT = 0x20
local player2_keyup_IOPORT = "IN1"
local player2_keyup_BITPORT = 0x0800
local player2_keydown_IOPORT = "IN1"
local player2_keydown_BITPORT= 0x0400

  -- Variables pour l'edge detection
  local prevKeyUp1 = true
  local prevKeyDown1 = true
  local prevKeyUp2 = true
  local prevKeyDown2 = true

  file:set_resolve_tags_callback(function ()
    -- Obtenir les ports pour les entrées du joueur 1
    local p1_start_port = file.device:ioport(player1_start_IOPORT)
    local p1_key_port   = file.device:ioport(player1_keyup_IOPORT)
    -- Pour le joueur 2, on utilise le même port IN0 et IN1, mais avec des bits différents
    local p2_start_port = file.device:ioport(player2_start_IOPORT)
    local p2_key_port   = file.device:ioport(player2_keyup_IOPORT)

    file.views["InstructionsCardsView"]:set_prepare_items_callback(function ()
      local leftCard  = file.views["InstructionsCardsView"].items["inst_left"]
      local rightCard = file.views["InstructionsCardsView"].items["inst_right"]

      local p1_start_val = p1_start_port:read()
      local p1_key_val   = p1_key_port:read()
      local p2_start_val = p2_start_port:read()
      local p2_key_val   = p2_key_port:read()

      -- Pour le joueur 1 (gauche)
      local p1_start = ((p1_start_val & player1_start_BITPORT) == 0)
      if p1_start then
        local p1_up   = ((p1_key_val & player1_keyup_BITPORT) == 0)
        if p1_up and not prevKeyUp1 then
          stateLeft = (stateLeft + 1) % numStates
          leftCard:set_state(stateLeft)
          print("Player1: Start+Up -> new state: " .. stateLeft)
        end
        local p1_down = ((p1_key_val & player1_keydown_BITPORT) == 0)
        if p1_down and not prevKeyDown1 then
          stateLeft = (stateLeft - 1 + numStates) % numStates
          leftCard:set_state(stateLeft)
          print("Player1: Start+Down -> new state: " .. stateLeft)
        end
        prevKeyUp1 = p1_up
        prevKeyDown1 = p1_down
      else
        prevKeyUp1 = true
        prevKeyDown1 = true
      end

      -- Pour le joueur 2 (droite)
      local p2_start = ((p2_start_val & player2_start_BITPORT) == 0)
      if p2_start then
        local p2_up   = ((p2_key_val & player2_keyup_BITPORT) == 0)
        if p2_up and not prevKeyUp2 then
          stateRight = (stateRight + 1) % numStates
          rightCard:set_state(stateRight)
          print("Player2: Start+Up -> new state: " .. stateRight)
        end
        local p2_down = ((p2_key_val & player2_keydown_BITPORT) == 0)
        if p2_down and not prevKeyDown2 then
          stateRight = (stateRight - 1 + numStates) % numStates
          rightCard:set_state(stateRight)
          print("Player2: Start+Down -> new state: " .. stateRight)
        end
        prevKeyUp2 = p2_up
        prevKeyDown2 = p2_down
      else
        prevKeyUp2 = true
        prevKeyDown2 = true
      end
    end)
  end)
]]></script>

</mamelayout>
